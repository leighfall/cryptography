from Crypto.Util import number

def mod_expo(g, a, p):
    r = 1
    if 1 & a: r = g
    while a > 0:
        a >>= 1
        g = (g * g) % p
        if a & 1: r = (r * g) % p
    return r

def euclidian(a, b):

    while (b != 0):
        r = (a % b)
        a = b
        b = r

    return a

def extended_euclidian(e, Tn):
    x = prev_y = 0
    prev_x = y = 1
    a = e
    b = Tn

    while b > 0:
        # Quotients
        q = a // b

        x, prev_x = prev_x - q * x, x
        y, prev_y = prev_y - q * y, y

        # Euclidean algorithm
        a, b = b, a % b

    return a, prev_x, prev_y

def generate_key_values():
    p = number.getPrime(1024)
#    print(f'p-value: {p}')
    q = number.getPrime(1024)
 #   print(f'q-value: {q}')

    n = p * q
    Tn = (p - 1) * (q - 1)

    return n, Tn

def print(n, Tn, d, a, prev_x, prev_y):
    print(f'n-value: {n}')
    print(f'Totient: {Tn}')
    print(f'a: {a}, prev_x: {prev_x}, prev_y: {prev_y}')
    print(f'Value of d: {d}')

def main():

    e = 65537

    while True:
        n, Tn = generate_key_values()
        gcd = euclidian(Tn, e)
        if (gcd == 1): break

    # Conduct extended Euclidean
    a, prev_x, prev_y = extended_euclidian(e, Tn)    
    d = prev_x % Tn


    # ----- PART 1 - ENCRYPT ----- #

    # Values used for passoff
    d = 525999542082141043899177507531845610299686825536625292704417390130646979095539582990832773626883377258226771617506872862466513360873389849962285300692702867717636381552717548920100247975910799791542965335909621789367210661771941128787286225779345590747830968781553877239548982066722790341676239668845573242418280920364963262369475918090407837361545866817505847053958978633403447211322848483690216971438533361046839290647944542290063430448261276799792748303319546496845451313032364192507960332616291500251564337171901344341996030207335901167449112817773612888518755514781382449902871735322297609373507536434081069377
    n = 12901359277484011075606435745177606946935095615716246934120285365640797555757626366193939927090215529705242489332540391761776903492350056361144570266279067305992041743196276198943342047753467846533814116474367097009640301325055279100798045426235393705404415494399961247248623367405243828825761870949525573947970580816054884821867133615795019770239173124706086113378220836505176941643307290223628880360701331206455791180382291164960844793839590820901798633067566154396724170637504851942575679826911583342514670348901698564457103357057526401394508274444341062277921391103333280834323670059622012815618436654713079808629

    pt = 'forefeeling'
    pt = pt.encode('ASCII')
    print(pt)
    pt = int.from_bytes(pt, "big")
    print(pt)

    ct = mod_expo(pt, e, n)
    print(ct)

    # ----- PART 2 - DECRYPT ------ #
    ct = 8251234107115600458185800036447077952911083769371862751620189602328152108886177822370692118067554490666542977076353477130479426194963339034091182020925379208887837574530355371917496170855979540563303198560965067172874838443795156415724194225618960406588802291222515109214077229853220587935515832147676199826725910652641957497507464617815573712675624534451002004617014605211296392320841660969278205180933749465937211579297588413618099739400057506197863627384458241969971746563143337640087843903743889110415962005713757958551139875081798857993695525073295136510333735192069675721643616525921040975604131695964725667601
    ct = mod_expo(ct, d, n)

    ct = ct.to_bytes(int((len(hex(ct)) - 2) / 2), "big")
    print(ct.decode('ASCII'))

if __name__ == "__main__":
    main()